###################################################################################

This is a set of benchmarks for using PENCIL in the image processing problem domain

###################################################################################

## Building ##

To build the CARP-Benchmarks, you need:
- A working OpenCL driver.
- The following packages needs to be installed (at least on Ubuntu 13.10):
    libboost-filesystem-dev libboost-system-dev (or, full Boost: libboost-all-dev)
    build-essential
    cmake
- A polyhedral compiler
        Refer to the compiler's readme how to build and install.
        This Benchmark requires a compiler version that also installs the PENCIL runtime.
- An OpenCV build:
    Tested with 2.4.9.1 and 2.4.10.1
    Download OpenCV
        git clone https://github.com/Itseez/opencv.git
    Checkout 2.4.9.1 or newer:
        cd opencv
        git checkout 2.4.10.1
        cd ..
    If you are running the benchmark on ARM Mali GPU you need to apply the patch
    0001-Make-image-filtering-erode-dilate-work-with-ARM-Mali.patch
    provided with the benchmark to OpenCV. This patch changes the workgroup sizes to smaller ones so that OpenCV kernels can run on Mali (which only accepts small workgroups).
        cd opencv
        git apply ../pencil-benchmarks-imageproc/0001-Make-image-filtering-erode-dilate-work-with-ARM-Mali.patch
        cd ..
    Configure build with CMake:
        mkdir opencv-build
        cd opencv-build
        cmake ../opencv -DENABLE_AVX=ON -DENABLE_SSE41=ON -DENABLE_SSE42=ON -DENABLE_SSSE3=ON -DENABLE_SSE3=ON
      If your CPU or OS does not support AVX/SSEx instruction sets, do not add the corresponding compile switches. If your CPU is ARM, set the appropriate NEON/VFP switches.
      Optional: Add TBB usage with -DWITH_TBB=ON (requires libtbb-dev package)
      Make sure the necessary modules are to be built - CMake should print a (long) status with a "To be built:" list, it should contain core, ocl and highgui (plus their dependencies)
        Build OpenCV
        make all -j12
    Optionally, install it as a system library:
        sudo make install
    
    Alternatively, you can try newer versions that might have fixed the issue in the patch, but those versions are not tested.
- Compile benchmark:
    Crate a directory for out-of-source build, run cmake and make:
    -> CMake can be configured from a GUI window using cmake-gui. (recommended: list all parameters that can be changed)
    -> OpenCL might not be found by the CMake script. In this case, set OPENCL_LIBRARY manually. It is a required parameter for ARM Mali: list BOTH libOpenCL.so and libmali.so.
    -> Based on your OpenCL device, it is recommended to set up PENCIL_DEFAULT_FLAGS_* variables:
        The default values are set to be the common denominator to allow it to work everywhere, but the performance is not optimal.
        PENCIL_DEFAULT_FLAGS_BLOCKSIZE should be set to the maximum workgroup sizes. For instance, AMD Radeon cards should use "16,16" (256 threads total)
        PENCIL_DEFAULT_FLAGS_LOCAL_MEMORY_SIZE is the amount of used __local memory. Alternatively set to 0 to disable __local memory usage (useful for ARM Mali).
        These parameters are reported by the tool clinfo: First is "Max work items[x]:" (individually) and "Max work group size:" (the multiply of values); second is "Max local memory:"
    -> Optionally, as performance tuning try turning PENCIL_DEFAULT_FLAGS_MAXFUSE, PENCIL_DEFAULT_FLAGS_NO_SEPARATE_COMP, PENCIL_DEFAULT_FLAGS_DISABLE_PRIVATE flags ON or OFF.
    -> If something is not installed at the standard paths (/usr, /usr/local), then run cmake-gui and edit the variables (should be straight-forward)
    -> Set CMAKE_BUILD_TYPE to Release for optimized build, set to Debug to build without optimizations and with debug info.

        mkdir pencil-benchmarks-imageproc-build
        cd pencil-benchmarks-imageproc-build
        cmake -DCMAKE_BUILD_TYPE=Release -DOPENCL_LIBRARY=/path/to/libOpenCL.so -DPENCIL_DEFAULT_FLAGS_BLOCKSIZE="A,B" -DPENCIL_DEFAULT_FLAGS_LOCAL_MEMORY_SIZE=C path/to/pencil-benchmarks-imageproc-repo
        make all -j12
    -> The CMake cache is persistent between builds, you only need to supply a parameter when you want to override it.
- (Optional) Tune per-kernel parameters:
    Because a polyhedral compiler can decide with different scheduling, it is impossible to know the optimal parameters in advance.
    Most importantly, we usually need to support separate tile-grid-block sizes for different kernels, and allows access to advanced parameters of the polyhedral compiler.
    You can supply these parameters using a corresponding PENCIL_FLAGS_* parameter, separate for every benchmark item. If this is not supplied, the default flags are used.
    -> Warning: Due to CMake restrictions, some characters (quotes, backslash) needs escaping. Also, the semicolon character cannot be used in these strings.
        instead of: --sizes={kernel[i]->tile[8,8];kernel[i]->grid[8,8];kernel[i]->block[8,8]}
        use:        --sizes=\"{kernel[i]->tile[8,8]}\" --sizes=\"{kernel[i]->grid[8,8]}\" --sizes=\"{kernel[i]->block[8,8]}\"
- Build benchmark:
    cd repository_root_path
    make all -j12

## Tested hardware parameters ##
AMD Radeon R9 290
  -DPENCIL_DEFAULT_FLAGS_BLOCKSIZE="16,16" -DPENCIL_DEFAULT_FLAGS_LOCAL_MEMORY_SIZE=32768 -DPENCIL_DEFAULT_FLAGS_MAXFUSE=ON -DPENCIL_DEFAULT_FLAGS_NO_SEPARATE_COMP=ON -DPENCIL_DEFAULT_FLAGS_DISABLE_PRIVATE=OFF

nVidia Tesla M2050
  -DPENCIL_DEFAULT_FLAGS_BLOCKSIZE="32,32" -DPENCIL_DEFAULT_FLAGS_LOCAL_MEMORY_SIZE=49152 -DPENCIL_DEFAULT_FLAGS_MAXFUSE=ON -DPENCIL_DEFAULT_FLAGS_NO_SEPARATE_COMP=ON -DPENCIL_DEFAULT_FLAGS_DISABLE_PRIVATE=OFF

Intel HD Graphics 4000
  -DPENCIL_DEFAULT_FLAGS_BLOCKSIZE="32,16" -DPENCIL_DEFAULT_FLAGS_LOCAL_MEMORY_SIZE=65536 -DPENCIL_DEFAULT_FLAGS_MAXFUSE=ON -DPENCIL_DEFAULT_FLAGS_NO_SEPARATE_COMP=ON -DPENCIL_DEFAULT_FLAGS_DISABLE_PRIVATE=OFF

ARM Mali T628
  -DPENCIL_DEFAULT_FLAGS_BLOCKSIZE="8,8"   -DPENCIL_DEFAULT_FLAGS_LOCAL_MEMORY_SIZE=0     -DPENCIL_DEFAULT_FLAGS_MAXFUSE=ON -DPENCIL_DEFAULT_FLAGS_NO_SEPARATE_COMP=ON -DPENCIL_DEFAULT_FLAGS_DISABLE_PRIVATE=OFF

Please, share the parameters to your device here
  
## Running ##

- Change to the build directory.
- Create a pool directory. Copy images to run the tests on here. There is an example set of images in build/pool/
- Run test_*
    Each executable runs a different operator with all three (C++, OpenCL, PENCIL) implementations.
    Results are cross-checked, and if there is no difference (within a small allowed precision error), total times are reported at the end.
